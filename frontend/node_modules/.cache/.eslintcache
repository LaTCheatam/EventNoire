[{"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/index.js":"1","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/App.js":"2","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/index.js":"3","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/csrf.js":"4","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/session.js":"5","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/LoginFormPage/index.js":"6","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/SignupFormPage/index.js":"7","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/Navigation/index.js":"8","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/Navigation/ProfileButton.js":"9","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/events.js":"10","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/eventIndex.js":"11","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/EventCreateFormPage/index.js":"12"},{"size":849,"mtime":1617118211252,"results":"13","hashOfConfig":"14"},{"size":1084,"mtime":1617301890992,"results":"15","hashOfConfig":"14"},{"size":755,"mtime":1617494499193,"results":"16","hashOfConfig":"14"},{"size":1276,"mtime":1617117424574,"results":"17","hashOfConfig":"14"},{"size":2300,"mtime":1617378132622,"results":"18","hashOfConfig":"14"},{"size":1959,"mtime":1617387438372,"results":"19","hashOfConfig":"14"},{"size":2477,"mtime":1617268467528,"results":"20","hashOfConfig":"14"},{"size":1173,"mtime":1617498545236,"results":"21","hashOfConfig":"14"},{"size":1193,"mtime":1617126224309,"results":"22","hashOfConfig":"14"},{"size":2756,"mtime":1617521530026,"results":"23","hashOfConfig":"14"},{"size":3761,"mtime":1617521581021,"results":"24","hashOfConfig":"14"},{"size":3411,"mtime":1617496286161,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1gxkh94",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/index.js",[],["54","55"],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/App.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/index.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/csrf.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/session.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/LoginFormPage/index.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/SignupFormPage/index.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/Navigation/index.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/Navigation/ProfileButton.js",[],"/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/events.js",["56"],"// frontend/src/store/event.js\nimport { csrfFetch } from './csrf'\nexport const LOAD_EVENTS = 'eventcreate/LOAD_EVENTS';\nexport const LOAD_EVENT = 'eventcreate/LOAD_EVENT'\nexport const REMOVE_EVENT = 'eventcreate/REMOVE_EVENT';\nexport const UPDATE_EVENT = 'eventcreate/UPDATE_EVENT';\nexport const ADD_EVENT = 'eventcreate/ADD_EVENT';\n    \nconst loadEvents = (events) => ({\n    type: LOAD_EVENTS,\n    events,\n});\n\nconst loadEvent = (event) => ({\n    type: LOAD_EVENT,\n    event,\n});\n\nconst removeEvent = (eventId) => ({\n    type: REMOVE_EVENT,\n    eventId,\n});\n\nconst addEvent = (event) => ({\n    type: ADD_EVENT,\n    event,\n});\n\nconst updateEvent = (event) => ({\n    type: UPDATE_EVENT,\n    event,\n});\n\n// get all events\nexport const fetchEvents = () => async (dispatch) => {\n  const response = await fetch(`/api/events`);\n\n  if (response.ok) {\n    const events = await response.json();\n    dispatch(loadEvents(events));\n  }\n};\n\n// get single event\nexport const fetchEvent = (id) => async (dispatch) => {\n  const response = await fetch(`/api/events/${id}`);\n\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(loadEvent(event, id));\n  }\n};\n\nexport const createEvent = (data) => async dispatch => {\n  // console.log(data)\n  const response = await csrfFetch(`/api/events`, {\n    method: 'post',\n    body: JSON.stringify(data),\n  });\n\n  if (response.ok) {\n    const event = await response.json();\n    console.log(event)\n    // dispatch(addEvent(event));\n  }\n};\n\nexport const renewEvent = data => async dispatch => {\n  const response = await fetch(`/api/events/${data.id}`, {\n    method: 'put',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(updateEvent(event));\n    return event;\n  }\n};\n\nexport const deleteEvent = eventId => async dispatch => {\n  const response = await fetch(`/api/events/${eventId}`, {\n    method: 'delete',\n  });\n\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(removeEvent(event.id, event.eventsId));\n  }\n};\n\nconst initialState = {};\n\nconst eventsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_EVENTS: {\n      const newEvents = {};\n      action.events.forEach(event => {\n        newEvents[event.id] = event;\n      })\n      return {\n        ...state,\n        ...newEvents\n      }\n    }\n    case REMOVE_EVENT: {\n      const newState = { ...state };\n      delete newState[action.eventId];\n      return newState;\n    }\n    case ADD_EVENT:\n    case UPDATE_EVENT: {\n      return {\n        ...state,\n        [action.event.id]: action.event,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default eventsReducer;","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/store/eventIndex.js",["57"],"// frontend/src/store/eventIndex.js\n\nimport { LOAD_EVENTS, LOAD_EVENT, REMOVE_EVENT, ADD_EVENT } from './events';\nimport { csrfFetch } from './csrf';\n\nconst LOAD = 'eventIndex/LOAD';\nconst LOAD_TYPES = 'eventIndex/LOAD_TYPES';\nconst ADD_ONE = 'eventIndex/ADD_ONE';\n  \nconst load = list => ({\n    type: LOAD,\n    list,\n});\n\nconst loadTypes = types => ({\n    type: LOAD_TYPES,\n    types,\n});\n\nconst addOneEvent = event => ({\n    type: ADD_ONE,\n    event,\n});\n\nexport const createEvent = data => async dispatch => {\n  console.log('this is data', data);\n  const response = await csrfFetch(`/api/events`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\nconsole.log(response)\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(addOneEvent(event));\n    return event;\n  }\n};\n\nexport const updateEvent = data => async dispatch => {\n  const response = await fetch(`/api/events/${data.id}`, {\n    method: 'put',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(addOneEvent(event));\n    return event;\n  }\n};\n\nexport const getOneEvent = id => async dispatch => {\n  const response = await fetch(`/api/events/${id}`);\n\n  if (response.ok) {\n    const event = await response.json();\n    dispatch(addOneEvent(event));\n  }\n};\n\nexport const getAllEvents = (data) => async dispatch => {\n  const response = await fetch(`/api/events/`);\n\n  if (response.ok) {\n    const list = await response.json();\n    dispatch(load(list));\n    return list;\n  }\n};\n\nexport const getEventTypes = () => async dispatch => {\n  const response = await fetch(`/api/events`);\n\n  if (response.ok) {\n    const types = await response.json();\n    dispatch(loadTypes(types));\n  }\n};\n\nconst initialState = {\n  list: [],\n  types: [],\n};\n\nconst sortList = (list) => {\n  return list.sort((eventA, eventB) => {\n    return eventA.no - eventB.no;\n  }).map((event) => event.id);\n};\n\nconst eventsIndexReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD: {\n      const allEvents = {};\n      action.list.forEach(event => {\n        allEvents[event.id] = event;\n      });\n      return {\n        ...allEvents,\n        ...state,\n        list: sortList(action.list),\n      };\n    }\n    case LOAD_TYPES: {\n      return {\n        ...state,\n        types: action.types,\n      };\n    }\n    case ADD_ONE: {\n      if (!state[action.event.id]) {\n        const newState = {\n          ...state,\n          [action.event.id]: action.event\n        };\n        const eventList = newState.list.map(id => newState[id]);\n        eventList.push(action.event);\n        newState.list = sortList(eventList);\n        return newState;\n      }\n      return {\n        ...state,\n        [action.event.id]: {\n          ...state[action.event.id],\n          ...action.event,\n        }\n      };\n    }\n    case LOAD_EVENTS: {\n      return {\n        ...state,\n        [action.eventId]: {\n          ...state[action.eventId],\n          events: action.events.map(event => event.id),\n        }\n      };\n    }\n    case REMOVE_EVENT: {\n      return {\n        ...state,\n        [action.eventId]: {\n          ...state[action.eventId],\n          events: state[action.eventId].filter(\n            (event) => event.id !== action.eventId\n          ),\n        },\n      };\n    }\n    case ADD_EVENT: {\n      console.log(action.event);\n      return {\n        ...state,\n        [action.event.eventId]: {\n          ...state[action.event.eventId],\n          events: [...state[action.event.eventId], action.event.id],\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default eventsIndexReducer;\n","/Users/obsidyenc/Documents/appAcadNov/Module5/Wk 16/EventNoire/frontend/src/components/EventCreateFormPage/index.js",["58","59"],"import './EventCreateForm.css';\n\nimport * as sessionActions from '../../store/session';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { createEvent } from '../../store/eventIndex';\n\n\nconst EventCreateForm = () => {\n    const sessionUser = useSelector(state => state.session.user)\n    const dispatch = useDispatch();\n    const history = useHistory();\n    // const [host, setHost] = useState('');\n    const [eventTitle, setEventTitle] = useState('');\n    const [content, setContent] = useState('')\n    // const [type, setType] = useState(eventTypes[0]);\n    const [eventImageUrl, setEventImageUrl] = useState('')\n    const [numTickets, setNumTickets] = useState(1);\n    const [eventDate, setEventDate] = useState(null);\n    \n    const [eventEnd, setEventEnd] = useState('');\n    const [errors, setErrors] = useState([]);\n    // console.log({title})\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setErrors([]);\n\n        const payload = {\n            userId: sessionUser.id, \n            eventTitle,\n            content,\n            eventImageUrl,\n            numTickets,\n            eventDate,\n            eventEnd,\n        };\nconsole.log('this is payload', payload )\n        await dispatch(createEvent (payload)).then(() => {\n            history.push('/')\n        }).catch(async (res) => {\n        const data = await res.json();\n        if (data && data.errors) setErrors(data.errors);\n      });\n    };\n\n    \n\n    return (\n        <div className='event-form-container'>\n            <h2 className='event-form-title'>Create An Event</h2>\n            <form onSubmit={handleSubmit} className='event-form-inputs'>\n                <ul className='the-errors'>\n                  {errors.map((error, idx) => <li key={idx}>{error}</li>)}\n                </ul>\n            <div className='event-form-contents'>\n                <label id='the-labels'>Title</label>\n                <input type='text' placeholder='Title' value={eventTitle} onChange={(event) => setEventTitle(event.target.value)} /> \n                <label id='the-labels'>Image</label>\n                <input type='url' placeholder='Image' value={eventImageUrl} onChange={(event) => setEventImageUrl(event.target.value)} /> \n                <label id='the-labels'>Description</label>\n                <input type='textarea' placeholder='Description' value={content} onChange={(event) => setContent(event.target.value)} />\n                <label id='the-labels'>Number of Tickets</label> \n                <input type='integer' placeholder='Number of Tickets' value={numTickets} onChange={(event) => setNumTickets(event.target.value)} />  \n                <label id='the-labels'>Start Date & Time</label>\n                <input type='datetime-local' placeholder='Set a start' value={eventDate} onChange={(event) => setEventDate(event.target.value)} />\n                <label id='the-labels'>End Date & Time</label>\n                <input type='datetime-local' placeholder='Set an end' value={eventEnd} onChange={(event) => setEventEnd(event.target.value)} /> \n    \n                <p>You're almost to the end. Nicely done!</p>\n                <button className='event-create-btn' type='submit'>Create Your Event</button>\n            </div> \n            </form>           \n        </div>\n    )\n\n}\nexport default EventCreateForm;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":24,"column":7,"nodeType":"66","messageId":"67","endLine":24,"endColumn":15},{"ruleId":"64","severity":1,"message":"68","line":3,"column":23,"nodeType":"66","messageId":"67","endLine":3,"endColumn":33},{"ruleId":"64","severity":1,"message":"69","line":3,"column":13,"nodeType":"66","messageId":"67","endLine":3,"endColumn":27},{"ruleId":"64","severity":1,"message":"70","line":4,"column":10,"nodeType":"66","messageId":"67","endLine":4,"endColumn":19},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'addEvent' is assigned a value but never used.","Identifier","unusedVar","'LOAD_EVENT' is defined but never used.","'sessionActions' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]